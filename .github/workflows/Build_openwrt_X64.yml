##
name: Build-OpenWrt_X64

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
     - cron: 0 15 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/custom.feeds.conf.default
  CONFIG_FILE: config/x64.config
  DIY_P1_SH: diy_script/diy-part1.sh
  DIY_P2_SH: diy_script/diy-part2.sh
  COMMIT_LOG_NUM: 1
  RELEASE_TAG: X64
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WECHAT_PUSH: true

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
  
    - name: WECHAT_PUSH Message
      if: env.WECHAT_PUSH == 'true'
      run: |
        echo `date +'%Y-%m-%d %H:%M:%S'` > runtime.log
        starttime=$(echo `date +'%Y-%m-%d %H:%M:%S'`)
        url="https://qyapi.weixin.qq.com/cgi-bin"
        token=`curl -s "$url/gettoken?corpid=${{ secrets.ID }}&corpsecret=${{ secrets.SECRET }}"|jq -r .access_token`
        curl --location --request POST 'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token='"${token}"'' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "touser" : "@all",
          "msgtype" : "textcard",
          "agentid" : ${{ secrets.AGENTID }},
          "textcard" : {
            "title" : "➤➤ 编译开始: ",
            "description" : "<div class=\"highlight\">🎉 固件名称：OpenWrt-'"${RELEASE_TAG}"'\n🎉 开始时间：'"${starttime}"'\n🎉 编译状态：进行中。。。 😋💐</div>",
            "url" : "https://github.com/c939984606/OpenWrt_Auto_Action/actions",
            "btntxt":"点击打开"
          },
        "enable_id_trans": 0,
        "enable_duplicate_check": 0,
        "duplicate_check_interval": 1800
        }'

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Free disk space
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h        

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        mkdir -p $GITHUB_WORKSPACE/openwrt/dl
        cp -r $GITHUB_WORKSPACE/library/* $GITHUB_WORKSPACE/openwrt/dl
        cd $GITHUB_WORKSPACE/openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Check space usage
      run: df -hT
      
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Remove Unuselesss Files To Free Up Space
      id: removeunuselessfiles
      run: |
        rm -rf  $GITHUB_WORKSPACE/openwrt/build_dir
        rm -rf  $GITHUB_WORKSPACE/openwrt/dl
        rm -rf  $GITHUB_WORKSPACE/openwrt/staging_dir
        rm -rf  $GITHUB_WORKSPACE/openwrt/target
        rm -rf  $GITHUB_WORKSPACE/openwrt/toolchain
        rm -rf  $GITHUB_WORKSPACE/openwrt/tools

    - name: Check space usage
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: success() && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: success() && env.UPLOAD_FIRMWARE == 'true'
      #continue-on-error: true
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        
        sudo apt-get install  s3fs
        mkdir -p upload_tmp
        find . -type f -name "*.vmdk" -print0 | xargs -0r rm
        find . -type f -name "*rootfs*" -print0 | xargs -0r rm
        find . -type f -name "*kernel.bin" -print0 | xargs -0r rm        
        find . -type f -name "*.img" | xargs cp -t ./upload_tmp
        mkdir -p upload
        echo "${{ secrets.password }}" > ./passwd-s3fs
        chmod 600 ./passwd-s3fs
        s3fs data ./upload -o passwd_file=./passwd-s3fs -o url=${{ secrets.miniourl }} -o use_path_request_style -o umask=0000
        rm -rf ./passwd-s3fs
        mkdir -p ./upload/OpenWrt/$(date +%Y%m%d)
        cp -rf ./upload_tmp/* ./upload/OpenWrt/$(date +%Y%m%d)
        sudo umount -f $PWD/upload
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
      

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: success()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: success() && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "::set-output name=release_tag::$RELEASE_TAG-$(date +"%Y.%m.%d-%H%M")"

        echo "## Update content" >> release.txt

        echo "<details> <summary> Lean Openwrt Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt
        echo -e "> $(git -C openwrt log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt
        
        echo "<details> <summary> Lean Package Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt        
        echo -e "> $(git -C openwrt/feeds/packages log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt
        
        echo "<details> <summary> Lean Luci Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/luci log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> Openwrt routing Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/routing log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> Openwrt telephony Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/telephony log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> SSRP Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/helloworld log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> Passwall Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/passwall log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 

        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 2
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: smallprogram/delete-older-releases@v0.2.1
      if: success() && env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
               
    - name: WECHAT_PUSH Message
      if: env.WECHAT_PUSH == 'true'
      run: |
        starttime=$(cat runtime.log)
        endtime=$(echo `date +'%Y-%m-%d %H:%M:%S'`)
        start_seconds=$(date --date="$starttime" +%s)
        end_seconds=$(date --date="$endtime" +%s)
        SEC=$((end_seconds-start_seconds))
        s=$(echo $(( (SEC % 3600) % 60 ))秒)
        m=$(echo $(( (SEC % 3600) / 60 ))分)
        h=$(echo $(( SEC / 3600 ))小时)
        url="https://qyapi.weixin.qq.com/cgi-bin"
        token=`curl -s "$url/gettoken?corpid=${{ secrets.ID }}&corpsecret=${{ secrets.SECRET }}"|jq -r .access_token`
        curl --location --request POST 'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token='"${token}"'' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "touser" : "@all",
          "msgtype" : "textcard",
          "agentid" : ${{ secrets.AGENTID }},
          "textcard" : {
            "title" : "➤➤ 编译完成: ",
            "description" : "<div class=\"highlight\">🎉 固件名称：OpenWrt-'"${RELEASE_TAG}"'\n🎉 结束时间：'"${endtime}"'\n🎉 编译用时：'"${h}"''"${m}"''"${s}"'\n🎉 编译状态：Success✅ 😋💐</div>",
            "url" : "'"${{ secrets.downloadurl }}"'",
            "btntxt":"点击打开"
          },
        "enable_id_trans": 0,
        "enable_duplicate_check": 0,
        "duplicate_check_interval": 1800
        }'     
